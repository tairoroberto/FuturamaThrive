def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion flutter.compileSdkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "br.com.tairoroberto.futurama_thrive"
        minSdkVersion flutter.minSdkVersion
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    def keystoreProperties = new Properties()
    def keystorePropertiesFile = file('../key.properties')
    def env = System.getenv()

    if (keystorePropertiesFile.exists()) {
        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
    } else {

        // Load keystore properties from environment or set their default values
        if (env['FTHRIVE_KEYSTORE_STORE']) keystoreProperties.put('FTHRIVE_KEYSTORE_STORE', env['FTHRIVE_KEYSTORE_STORE'])
        else keystoreProperties.put('FTHRIVE_KEYSTORE_STORE', "debug.keystore")

        if (env['FTHRIVE_KEYSTORE_ALIAS']) keystoreProperties.put('FTHRIVE_KEYSTORE_ALIAS', env['FTHRIVE_KEYSTORE_ALIAS'])
        else keystoreProperties.put('FTHRIVE_KEYSTORE_ALIAS', "androiddebugkey")

        if (env['FTHRIVE_KEYSTORE_KEY_PASS']) keystoreProperties.put('FTHRIVE_KEYSTORE_KEY_PASS', env['FTHRIVE_KEYSTORE_KEY_PASS'])
        else keystoreProperties.put('FTHRIVE_KEYSTORE_KEY_PASS', "android")

        if (env['FTHRIVE_KEYSTORE_ALIAS_PASS']) keystoreProperties.put('FTHRIVE_KEYSTORE_ALIAS_PASS', env['FTHRIVE_KEYSTORE_ALIAS_PASS'])
        else keystoreProperties.put('FTHRIVE_KEYSTORE_ALIAS_PASS', "android")
    }

    signingConfigs {
        debug {
            storeFile file("debug.keystore")
            keyAlias "androiddebugkey"
            storePassword "android"
            keyPassword "android"
        }
        release {
            storeFile file(keystoreProperties["FTHRIVE_KEYSTORE_STORE"])
            keyAlias keystoreProperties["FTHRIVE_KEYSTORE_ALIAS"]
            storePassword keystoreProperties["FTHRIVE_KEYSTORE_KEY_PASS"]
            keyPassword keystoreProperties["FTHRIVE_KEYSTORE_ALIAS_PASS"]
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources true
            useProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
